# Generated by Django 4.2.16 on 2025-08-16 20:24

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="PersonalityQuiz",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(max_length=500)),
                (
                    "quiz_type",
                    models.CharField(
                        choices=[
                            ("big_five", "Big Five Personality"),
                            ("creative_style", "Creative Style Assessment"),
                            ("collaboration_preference", "Collaboration Preference"),
                            ("work_style", "Work Style Assessment"),
                        ],
                        max_length=30,
                    ),
                ),
                ("questions", models.JSONField(default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Personality Quiz",
                "verbose_name_plural": "Personality Quizzes",
                "db_table": "personality_quizzes",
            },
        ),
        migrations.CreateModel(
            name="PersonalityProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "openness",
                    models.FloatField(
                        default=50.0,
                        help_text="Openness to experience and new ideas",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "conscientiousness",
                    models.FloatField(
                        default=50.0,
                        help_text="Organization and dependability",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "extraversion",
                    models.FloatField(
                        default=50.0,
                        help_text="Social energy and assertiveness",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "agreeableness",
                    models.FloatField(
                        default=50.0,
                        help_text="Cooperation and trust",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "neuroticism",
                    models.FloatField(
                        default=50.0,
                        help_text="Emotional stability",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "creativity_index",
                    models.FloatField(
                        default=50.0,
                        help_text="Overall creativity and innovation score",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "risk_tolerance",
                    models.FloatField(
                        default=50.0,
                        help_text="Willingness to take creative risks",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "collaboration_style",
                    models.CharField(
                        choices=[
                            ("leader", "Natural Leader"),
                            ("collaborator", "Equal Collaborator"),
                            ("supporter", "Supportive Partner"),
                            ("independent", "Independent Worker"),
                        ],
                        default="collaborator",
                        max_length=20,
                    ),
                ),
                (
                    "communication_preference",
                    models.CharField(
                        choices=[
                            ("direct", "Direct Communication"),
                            ("diplomatic", "Diplomatic Approach"),
                            ("casual", "Casual Style"),
                            ("formal", "Formal Style"),
                        ],
                        default="casual",
                        max_length=20,
                    ),
                ),
                (
                    "work_pace",
                    models.CharField(
                        choices=[
                            ("fast", "Fast-paced"),
                            ("moderate", "Moderate pace"),
                            ("deliberate", "Deliberate/Slow"),
                        ],
                        default="moderate",
                        max_length=15,
                    ),
                ),
                (
                    "feedback_style",
                    models.CharField(
                        choices=[
                            ("frequent", "Frequent feedback"),
                            ("milestone", "Milestone-based"),
                            ("minimal", "Minimal feedback"),
                        ],
                        default="milestone",
                        max_length=15,
                    ),
                ),
                (
                    "compatibility_vector",
                    models.JSONField(
                        default=dict,
                        help_text="AI-computed vector for matching compatibility",
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.0,
                        help_text="AI confidence in personality assessment",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="personality_profile",
                        to="accounts.creatorprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Personality Profile",
                "verbose_name_plural": "Personality Profiles",
                "db_table": "personality_profiles",
            },
        ),
        migrations.CreateModel(
            name="PersonalityResponse",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("answers", models.JSONField(default=dict)),
                ("completion_time_seconds", models.IntegerField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="personality_responses",
                        to="accounts.creatorprofile",
                    ),
                ),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="accounts.personalityquiz",
                    ),
                ),
            ],
            options={
                "verbose_name": "Personality Response",
                "verbose_name_plural": "Personality Responses",
                "db_table": "personality_responses",
                "unique_together": {("profile", "quiz")},
            },
        ),
        migrations.CreateModel(
            name="CollaborationMatch",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "compatibility_score",
                    models.FloatField(
                        help_text="Overall compatibility score",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "personality_score",
                    models.FloatField(
                        help_text="Personality-based compatibility",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "skill_complementarity_score",
                    models.FloatField(
                        help_text="How well skills complement each other",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "match_reason",
                    models.TextField(
                        help_text="AI-generated explanation for the match",
                        max_length=500,
                    ),
                ),
                (
                    "suggested_collaboration_types",
                    models.JSONField(
                        default=list, help_text="List of suggested collaboration types"
                    ),
                ),
                (
                    "status_a",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Review"),
                            ("viewed", "Viewed"),
                            ("liked", "Liked"),
                            ("passed", "Passed"),
                            ("matched", "Mutual Match"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                (
                    "status_b",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Review"),
                            ("viewed", "Viewed"),
                            ("liked", "Liked"),
                            ("passed", "Passed"),
                            ("matched", "Mutual Match"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("viewed_at_a", models.DateTimeField(blank=True, null=True)),
                ("viewed_at_b", models.DateTimeField(blank=True, null=True)),
                ("matched_at", models.DateTimeField(blank=True, null=True)),
                (
                    "profile_a",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="matches_as_a",
                        to="accounts.creatorprofile",
                    ),
                ),
                (
                    "profile_b",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="matches_as_b",
                        to="accounts.creatorprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Collaboration Match",
                "verbose_name_plural": "Collaboration Matches",
                "db_table": "collaboration_matches",
                "indexes": [
                    models.Index(
                        fields=["profile_a", "status_a"],
                        name="collaborati_profile_97f111_idx",
                    ),
                    models.Index(
                        fields=["profile_b", "status_b"],
                        name="collaborati_profile_0d8da1_idx",
                    ),
                    models.Index(
                        fields=["compatibility_score"],
                        name="collaborati_compati_a2d14f_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="collaborati_created_277ca5_idx"
                    ),
                ],
                "unique_together": {("profile_a", "profile_b")},
            },
        ),
    ]
