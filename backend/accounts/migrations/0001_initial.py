# Generated by Django 4.2.16 on 2025-08-16 20:02

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "verification_code",
                    models.CharField(blank=True, max_length=6, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "auth_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CreatorProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("display_name", models.CharField(max_length=100)),
                ("bio", models.TextField(blank=True, max_length=500)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("visual_arts", "Visual Arts"),
                            ("performing_arts", "Performing Arts"),
                            ("literary_arts", "Literary Arts"),
                            ("design", "Design"),
                            ("digital_arts", "Digital Arts"),
                            ("crafts", "Crafts"),
                            ("media_arts", "Media Arts"),
                            ("culinary_arts", "Culinary Arts"),
                            ("architecture", "Architecture"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("subcategory", models.CharField(blank=True, max_length=100)),
                (
                    "experience_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                            ("professional", "Professional"),
                        ],
                        max_length=15,
                    ),
                ),
                ("location", models.CharField(blank=True, max_length=100)),
                ("instagram_url", models.URLField(blank=True, null=True)),
                ("youtube_url", models.URLField(blank=True, null=True)),
                ("spotify_url", models.URLField(blank=True, null=True)),
                ("website_url", models.URLField(blank=True, null=True)),
                ("is_validated", models.BooleanField(default=False)),
                ("validation_score", models.FloatField(default=0.0)),
                ("health_score", models.FloatField(default=0.0)),
                ("activity_score", models.FloatField(default=0.0)),
                ("connection_score", models.FloatField(default=0.0)),
                ("feedback_score", models.FloatField(default=0.0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_active", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Creator Profile",
                "verbose_name_plural": "Creator Profiles",
                "db_table": "creator_profiles",
            },
        ),
        migrations.CreateModel(
            name="PortfolioItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, max_length=1000)),
                (
                    "media_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("video", "Video"),
                            ("audio", "Audio"),
                            ("document", "Document"),
                        ],
                        max_length=10,
                    ),
                ),
                ("file", models.FileField(upload_to="portfolio/%Y/%m/")),
                (
                    "thumbnail",
                    models.ImageField(
                        blank=True, null=True, upload_to="thumbnails/%Y/%m/"
                    ),
                ),
                ("is_validated", models.BooleanField(default=False)),
                ("validation_score", models.FloatField(default=0.0)),
                ("is_original", models.BooleanField(default=True)),
                ("file_size", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="portfolio_items",
                        to="accounts.creatorprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Portfolio Item",
                "verbose_name_plural": "Portfolio Items",
                "db_table": "portfolio_items",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProfileFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "feedback_type",
                    models.CharField(
                        choices=[
                            ("positive", "Positive"),
                            ("constructive", "Constructive"),
                            ("report", "Report"),
                        ],
                        max_length=15,
                    ),
                ),
                (
                    "rating",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]
                    ),
                ),
                ("comment", models.TextField(blank=True, max_length=500)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback_received",
                        to="accounts.creatorprofile",
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback_given",
                        to="accounts.creatorprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Profile Feedback",
                "verbose_name_plural": "Profile Feedback",
                "db_table": "profile_feedback",
                "unique_together": {("profile", "reviewer")},
            },
        ),
        migrations.AddIndex(
            model_name="creatorprofile",
            index=models.Index(
                fields=["category", "experience_level"],
                name="creator_pro_categor_76690f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="creatorprofile",
            index=models.Index(
                fields=["location"], name="creator_pro_locatio_c0ed29_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="creatorprofile",
            index=models.Index(
                fields=["health_score"], name="creator_pro_health__f4f13e_idx"
            ),
        ),
    ]
